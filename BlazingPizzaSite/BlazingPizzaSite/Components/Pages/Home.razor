@page "/"

@inject IPizzaRepository PizzaRepository // get list of pizzas from the repository
@attribute [StreamRendering]

<PageTitle>Blazing Pizza</PageTitle>

<div class="jumbotron jumbotron-fluid text-center">
    <div class="container">
        <h1 class="display-4">Welcome to Blazing Pizza!</h1>
        <p class="lead">@welcomeMessage</p>
    </div>
</div>


<div class="row justify-content-center">
    <div class="col-md-6">
        @if (pizzas is null)
        {
            <div class="pizza-item">
                We're finding out what pizzas are available today...
            </div>
        }
        else if (pizzas.Any())
        {
            @foreach (var pizza in pizzas)
            {
                <div class="pizza-item">
                    <PizzaCard Pizza="pizza" />
                </div>
            }
        }
        else
        {
            <div class="pizza-item">
                Sorry, we're out of pizza today!
            </div>
        }

    </div>
</div>


@code {
    private string welcomeMessage = "However you like your pizzas, we can deliver them fast!";

    private IEnumerable<Pizza>? pizzas;
    /*
    private async Task LoadPizzas()
    {
    var pizzas = await PizzaRepository.GetPizzas();
    var pizzaCount = pizzas.Count();
    welcomeMessage = $"We have {pizzaCount} different pizzas available!";
    }*/

    /*
    * The OnInitializedAsync method is called when the component is initialized.
    * This is a good place to load data from a repository or perform other initialization tasks.
    */
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(3000); // Simulate a network delay
        pizzas = await PizzaRepository.GetAllPizzasAsync();
        var pizzaCount = pizzas.Count();
        welcomeMessage = $"We have {pizzaCount} different pizzas available!";
    }
}


